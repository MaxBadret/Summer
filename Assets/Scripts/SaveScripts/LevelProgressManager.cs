using System.Collections.Generic;
using System.IO;
using UnityEngine;

public static class LevelProgressManager
{
    private static string filePath = Path.Combine(Application.persistentDataPath, "level_progress.json");
    private static LevelProgressData currentData;

    // –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
    public static void CreateOrUpdateProgressFile(List<string> levelNames)
    {
        if (File.Exists(filePath))
        {
            string json = File.ReadAllText(filePath);
            currentData = JsonUtility.FromJson<LevelProgressData>(json);

            bool changed = false;

            // –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π, —á–µ–º –≤ —Å–ø–∏—Å–∫–µ ‚Äî –æ–±—Ä–µ–∑–∞–µ–º
            if (currentData.levels.Count > levelNames.Count)
            {
                currentData.levels.RemoveRange(levelNames.Count, currentData.levels.Count - levelNames.Count);
                changed = true;
            }

            for (int i = 0; i < levelNames.Count; i++)
            {
                if (i >= currentData.levels.Count)
                {
                    currentData.levels.Add(new LevelStatus(levelNames[i]));
                    changed = true;
                }
                else if (currentData.levels[i].name != levelNames[i])
                {
                    currentData.levels[i].name = levelNames[i];
                    changed = true;
                }
            }

            if (changed)
            {
                SaveProgress();
                Debug.Log("üîÑ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.");
            }
            else
            {
                Debug.Log("‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–∫—Ç—É–∞–ª–µ–Ω.");
            }
        }
        else
        {
            currentData = new LevelProgressData();

            foreach (string name in levelNames)
            {
                currentData.levels.Add(new LevelStatus(name));
            }

            SaveProgress();
            Debug.Log("üìÑ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω.");
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    public static void SaveProgress()
    {
        if (currentData == null) return;

        string json = JsonUtility.ToJson(currentData, true);
        File.WriteAllText(filePath, json);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    public static List<LevelStatus> LoadProgress()
    {
        if (!File.Exists(filePath))
        {
            Debug.LogWarning("–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return null;
        }

        string json = File.ReadAllText(filePath);
        currentData = JsonUtility.FromJson<LevelProgressData>(json);

        return currentData.levels;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (completed == 1)
    public static int GetCompletedLevelCount()
    {
        if (currentData == null || currentData.levels == null) return 0;

        int count = 0;
        foreach (var level in currentData.levels)
        {
            if (level.completed == 1) count++;
        }
        return count;
    }

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–≤–Ω—è
    public static void SetLevelCompleted(string levelName, bool completed)
    {
        if (currentData == null || currentData.levels == null) return;

        var level = currentData.levels.Find(l => l.name == levelName);
        if (level != null)
        {
            level.completed = completed ? 1 : 0;
            SaveProgress();
        }
    }
}

