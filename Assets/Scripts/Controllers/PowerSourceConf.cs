using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class PowerSourceConf : MonoBehaviour
{
    public static PowerSourceConf Instance;

    [SerializeField] PowerSourceComponent pwSource;
    [SerializeField] TMP_InputField inpField;

    [SerializeField] TMP_InputField outVolt;
    [SerializeField] TMP_InputField outAmper;
    [SerializeField] TMP_InputField totalResist;
    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        Instance = this;
        inpField.text = pwSource.GetVoltage2().ToString("F4");
    }

    void Update()
    {
        if (CircuitManager.Instance == null)
            return;

        var last = CircuitManager.Instance.GetLastComponent();
        if (last == null)
            return;

        SignalData signal = last.GetOutputSignal();

        outVolt.text = signal.Voltage.ToString("F4");
        outAmper.text = signal.Current.ToString("F4");
        totalResist.text = CircuitManager.Instance.totRes.ToString("F4");
    }

    public void ApplyValue()
    {
        FormatAndApplyInput();

        if (pwSource != null && float.TryParse(inpField.text, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out float voltage))
        {
            pwSource.SetVoltage(voltage);
        }
    }

    public void FormatAndApplyInput()
    {
        if (inpField == null) return;

        string input = inpField.text;

        // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–µ–∫/–∑–∞–ø—è—Ç—ã—Ö
        string filtered = "";
        foreach (char c in input)
        {
            if (char.IsDigit(c) || c == '.' || c == ',')
            {
                filtered += c;
            }
        }

        // 2. –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        filtered = filtered.Replace('.', ',');

        // 3. –£–¥–∞–ª—è–µ–º –º–∏–Ω—É—Å—ã (–¥–µ–ª–∞–µ–º —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º)
        filtered = filtered.Replace("-", "");

        // 4. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
        if (filtered.Length > 10)
        {
            filtered = filtered.Substring(0, 10);
        }

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ
        inpField.text = filtered;
    }

    private float GetOutVoltage()
    {
        // üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å—Ö–µ–º—ã –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        var last = CircuitManager.Instance.GetLastComponent();
        if (last == null)
            return 0;
        SignalData signal = last.GetOutputSignal();

        return signal.Voltage;
    }

    private float GetOutAmper()
    {
        // üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å—Ö–µ–º—ã –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        var last = CircuitManager.Instance.GetLastComponent();
        if (last == null)
            return 0;
        SignalData signal = last.GetOutputSignal();

        return signal.Current;
    }
}
