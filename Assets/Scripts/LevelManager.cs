using System.IO;
using UnityEngine;

public class LevelManager : MonoBehaviour
{
    [Header("–ò–º—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤ JSON)")]
    public string levelName;

    [Header("–¢—Ä–µ–±—É–µ–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ")]
    public float requiredVoltage = 5f;

    private string saveFilePath;

    private void Start()
    {
        saveFilePath = Path.Combine(Application.persistentDataPath, "progress.json");
    }

    private void Update()
    {
        if (CheckWinCondition())
        {
            MarkLevelCompleted();
            enabled = false; // –í—ã–∫–ª—é—á–∞–µ–º LevelManager –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        }
    }

    private bool CheckWinCondition()
    {
        // üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å—Ö–µ–º—ã –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        var last = CircuitManager.Instance.GetLastComponent();
        if (last == null) return false;

        SignalData signal = last.GetOutputSignal();
        return Mathf.Abs(signal.Voltage - requiredVoltage) < 0.01f;
    }

    private void MarkLevelCompleted()
    {
        if (!File.Exists(saveFilePath))
        {
            Debug.LogWarning("‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        string json = File.ReadAllText(saveFilePath);
        LevelProgressData data = JsonUtility.FromJson<LevelProgressData>(json);

        bool found = false;
        foreach (var entry in data.levels)
        {
            if (entry.name == levelName)
            {
                if (entry.completed == 0) // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
                {
                    entry.completed = 1; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
                    Debug.Log($"‚úÖ –£—Ä–æ–≤–µ–Ω—å \"{levelName}\" –ø—Ä–æ–π–¥–µ–Ω!");
                }
                found = true;
                break;
            }
        }

        if (!found)
        {
            Debug.LogWarning($"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å \"{levelName}\" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ json.");
            return;
        }

        string updatedJson = JsonUtility.ToJson(data, true);
        File.WriteAllText(saveFilePath, updatedJson);
    }
}
