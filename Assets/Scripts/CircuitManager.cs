using UnityEngine;
using System.Collections.Generic;

public class CircuitManager : MonoBehaviour
{
    public static CircuitManager Instance { get; private set; }

    [SerializeField] private PowerSourceComponent powerSource;

    private List<BaseComponent> lastPath = new();
    private bool circuitChanged = true;

    private bool circuitValid = false;

    private BaseComponent lastBeforePowerSource = null;

    private void Awake()
    {
        if (Instance != null && Instance != this)
            Destroy(this);
        else
            Instance = this;

        circuitChanged = false;
    }

    void Update()
    {
        // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã
        if (circuitChanged)
        {
            Debug.Log("üîÑ –°—Ö–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º...");

            List<BaseComponent> path = BuildPath(powerSource);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º circuitChanged —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏,
            // —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ
            circuitChanged = false;

            if (!IsCircuitClosed(powerSource))
            {
                Debug.Log("‚ùå –¶–µ–ø—å –Ω–µ –∑–∞–º–∫–Ω—É—Ç–∞! –î–æ–±–∞–≤—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.");
                circuitValid = false;
                return;
            }

            lastPath = path;
            circuitValid = true;

            Debug.Log("‚úÖ –¶–µ–ø—å –∑–∞–º–∫–Ω—É—Ç–∞. –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏.");
        }

        // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–ø—å –≤–∞–ª–∏–¥–Ω–∞
        if (circuitValid)
        {
            SimulateCircuit(lastPath);
        }
    }

    public void MarkCircuitChanged()
    {
        circuitChanged = true;
    }


    private void SimulateCircuit(List<BaseComponent> path)
    {
        float totalResistance = CalculateTotalResistance(path);
        totalResistance = Mathf.Round(totalResistance * 10000f) / 10000f;
        Debug.Log($"üîç –û–±—â–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {totalResistance} –û–º");

        float current = powerSource.GetVoltage() / totalResistance;
        current = Mathf.Round(current * 10000f) / 10000f;
        Debug.Log($"‚ö° –¢–æ–∫ –≤ —Ü–µ–ø–∏: {current} –ê");

        SignalData signal = new SignalData(powerSource.GetVoltage(), current);

        foreach (BaseComponent component in path)
        {
            component.ProcessSignal(signal);
            signal = component.GetOutputSignal();
        }
    }

    private List<BaseComponent> BuildPath(BaseComponent start)
    {
        List<BaseComponent> path = new();
        HashSet<BaseComponent> visited = new();
        Traverse(start, path, visited);
        return path;
    }

    private void Traverse(BaseComponent node, List<BaseComponent> path, HashSet<BaseComponent> visited)
    {
        if (node == null || visited.Contains(node)) return;
        visited.Add(node);
        path.Add(node);

        foreach (BaseComponent next in node.GetOutputs())
        {
            if (next != null)
                Traverse(next, path, visited);
        }
    }

    private float CalculateTotalResistance(List<BaseComponent> components)
    {
        float total = 0f;
        foreach (BaseComponent c in components)
        {
            total += c.GetResistance();
        }
        return total;
    }

    private bool IsCircuitClosed(PowerSourceComponent source)
    {
        HashSet<BaseComponent> visited = new();
        return SearchLoop(source, source, visited);
    }

    private bool SearchLoop(BaseComponent current, BaseComponent target, HashSet<BaseComponent> visited)
    {
        if (visited.Contains(current)) return false;
        visited.Add(current);

        foreach (BaseComponent next in current.GetOutputs())
        {
            if (next == target)
            {
                lastBeforePowerSource = current; // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                return true;
            }

            if (SearchLoop(next, target, visited))
                return true;
        }

        return false;
    }
    
    public BaseComponent GetLastComponent()
    {
        return lastBeforePowerSource;
    }
}
